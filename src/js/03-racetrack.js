import '../css/common.css';

const horses = [
  'Secretariat',
  'Eclipse',
  'West Australian',
  'Flying Fox',
  'Seabiscuit',
];

const refs = {
  startBtn: document.querySelector('.js-start-race'),
  winnerField: document.querySelector('.js-winner'),
  progressField: document.querySelector('.js-progress'),
  tableBody: document.querySelector('.js-results-table > tbody'),
};
function run(horse) {
  const time = getRandomTime(2000, 3000);

  return new Promise((resolve, rejected)=>{
  setTimeout(()=>{
    resolve({horse, time})
  },
  time);
  
})  
}

run(horses[1]).then(({horse, time}) =>{
  refs.winnerField.textContent = `üéâ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å ${horse}, —Ñ–∏–Ω–∏—à—É–≤–∞–≤ –∑–∞ ${time}
  —á–∞—Å—É`
}).catch(console.error)








// let raceCounter = 0;
// const refs = {
//   startBtn: document.querySelector('.js-start-race'),
//   winnerField: document.querySelector('.js-winner'),
//   progressField: document.querySelector('.js-progress'),
//   tableBody: document.querySelector('.js-results-table > tbody'),
// };

// refs.startBtn.addEventListener('click', onStart);



// function onStart() {
//   raceCounter += 1;
//   const promises = horses.map(run);

//   updateWinnerField('');
//   updateProgressField('ü§ñ –ó–∞—ó–∑–¥ —Ä–æ–∑–ø–æ—á–∞–≤—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è!');
//   determineWinner(promises);
//   waitForAll(promises);
// }

// function determineWinner(horsesP) {
//   Promise.race(horsesP).then(({ horse, time }) => {
//     updateWinnerField(`üéâ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å ${horse}, —Ñ–∏–Ω–∏—à—É–≤–∞–≤ –∑–∞ ${time}
//     –≤—Ä–µ–º–µ–Ω–∏`);
//     updateResultsTable({ horse, time, raceCounter });
//   });
// }

// function waitForAll(horsesP) {
//   Promise.all(horsesP).then(() => {
//     updateProgressField('üìù –ó–∞—ó–∑–¥ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è, –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è —Å—Ç–∞–≤–∫–∏.');
//   });
// }

// function updateWinnerField(message) {
//   refs.winnerField.textContent = message;
// }

// function updateProgressField(message) {
//   refs.progressField.textContent = message;
// }

// function updateResultsTable({ horse, time, raceCounter }) {
//   const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;
//   refs.tableBody.insertAdjacentHTML('beforeend', tr);
// }

// // /*
// //  * Promise.race([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞
// //  */

// // /*
// //  * Promise.all([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤
// //  */

// function run(horse) {
//   return new Promise(resolve => {
//     const time = getRandomTime(2000, 3500);

//     setTimeout(() => {
//       resolve({ horse, time });
//     }, time);
//   });
// }

function getRandomTime(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}






//  Math.floor(num) - –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ, –º–µ–Ω—à–µ, –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –≤–∫–∞–∑–∞–Ω–æ–º—É
console.log(Math.floor(1.7)); // 1

// Math.ceil(num) - –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ,
// –±—ñ–ª—å—à–µ, –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –∑–∞–∑–Ω–∞—á–µ–Ω–æ–º—É —á–∏—Å–ª—É.
console.log(Math.ceil(1.2)); // 2

// Math.round(num) - –ø–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è —á–∏—Å–ª–∞, –æ–∫—Ä—É–≥–ª–µ–Ω–µ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —Ü—ñ–ª–æ–≥–æ
console.log(Math.round(1.2)); // 1
console.log(Math.round(1.5)); // 2

// Math.max(num1, num2, ...) - –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –∑ –Ω–∞–±–æ—Ä—É
console.log(Math.max(20, 10, 50, 40)); // 50

// Math.min(num1, num2, ...) - –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ —á–∏—Å–ª–æ –∑ –Ω–∞–±–æ—Ä—É
console.log(Math.min(20, 10, 50, 40)); // 10

// Math.pow(base, exponent) - –∑–≤–µ–¥–µ–Ω–Ω—è –≤ —Å—Ç—É–ø—ñ–Ω—å
console.log(Math.pow(2, 4)); // 16

// Math.random() - –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Å–µ–≤–¥–æ–≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ [0, 1)
console.log(Math.random()); // –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –º—ñ–∂ 0 –∏ 1
console.log(Math.random() * (10 - 1) + 1); // –≤–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10




